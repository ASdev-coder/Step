
#include <iostream>

//int main()
//{
//    std::cout << 4 + 5;                 // int operator+(int a, int b)
//    std::cout << 4.1 + 5.9;             // double operator+(double a, double b)
//    std::cout << 4 + 5.9;               // double operator+(int a, double b)
//    std::cout << 4 / "vasia";
//}


//class Point
//{
//private:
//	int x;
//	int y;
//public:
//	Point(int x, int y):
//		x{x},
//		y{y}
//	{}
//};
//
//int main()
//{
//	/*int a{ 4 };
//	int b{ 5 };
//
//	double c{ 3.2 };
//	double d{ 5.8 };
//
//	std::cout << a + b << '\n';
//	std::cout << c + d << '\n';*/
//
//	Point a{ 3, 4 };
//	Point b{ 5, 7 };
//
//	// Point c{ a + b };				// ERROR
//	// std::cout << a + b;				// ERROR
//	// bool res1 = a > b;				// ERROR
//	// bool res1 = a > 5;				// ERROR
//}



// ======= Ограничения =========
// 
// 1. Операторы, которые нельзя перегружать
//		:?
//		sizeof
//		::
//		.
//
// 2. Можно перегружать только существующие операторы
//
// 3. Как минимум один операнд должен быть пользовательского типа
//				Нельзя перегрузить operator+(int a, int b)
//
// 4. Количество операндов менять нельзя
// 
// 5. Все операторы сохраняют приоритет и ассоциативность




// ======= Особенности ========
//
// 1. Типы операторов
//		унарные			-a	+a	++a		a++		.......
//		бинарные		a+b		a*b		a%b		.......
//		тернарный		a?b:c (перегружать нельзя)
//
// 2. Варианты локализации перегрузки
//		метод класса (только так: =		[]		()		->		(type))
//		ф-ция
//		дружественная ф-ция (только так: <<		>> )
// 
//	2.1 Рекомендации
//		+ унарные операторы ---> через метод класса
//		+ бинарные операторы
//				+ если изменяется левый операнд ---> метод класса
//				+ если не изменяется левый операнд ---> через ф-цию
//
// 3. Тип возврата ЛЮБОЙ!!!


